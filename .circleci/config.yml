# .circleci/config.yml
version: 2.1


parameters:
  run_manual:
    type: boolean
    default: false

executors:
  docker-exec:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    environment:
      DOCKER_CONTEXT: "Containers_SOD/nginx-alpine-site"
      DOCKERFILE: "Containers_SOD/nginx-alpine-site/Dockerfile"
      REPO_NAME: "nginx-site"
      SITE_HOST: "www.schoolofdevops.ro"
      HOST_PORT: "8080"                   # safer than 80 in CI
      CONTAINER_PORT: "80"



jobs:
  build-image:
    executor: docker-exec
    steps:
      - checkout
      # - run:
      #     name: Check if .circleci/config.yml changed
      #     command: |
      #       if ! git diff --name-only $CIRCLE_BRANCH~1 $CIRCLE_BRANCH | grep -q ".circleci/config.yml"; then
      #         echo "No changes to .circleci/config.yml, skipping pipeline."
      #         circleci step halt
      #       fi
      - setup_remote_docker
      - run:
          name: Build image (tagged with SHA)
          command: |
            set -e
            IMAGE="${DOCKERHUB_USERNAME}/${REPO_NAME}"
            TAG="${CIRCLE_SHA1:0:12}"

            docker build \
              -f "${DOCKERFILE}" \
              -t "${IMAGE}:${TAG}" \
              "${DOCKER_CONTEXT}"

            mkdir -p /tmp/img
            docker save "${IMAGE}:${TAG}" -o /tmp/img/image.tar
            {
              echo "IMAGE=${IMAGE}"
              echo "TAG=${TAG}"
              echo "REPO_NAME=${REPO_NAME}"
              echo "SITE_HOST=${SITE_HOST}"
              echo "HOST_PORT=${HOST_PORT}"
              echo "CONTAINER_PORT=${CONTAINER_PORT}"
              echo "CONTAINER_NAME=schoolofdevops-${CIRCLE_SHA1:0:12}"
            } > /tmp/img/meta.env

      - persist_to_workspace:
          root: /tmp
          paths:
            - img

  smoke-test:
    executor: docker-exec
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /tmp

      - run:
          name: Load & run container
          command: |
            set -e
            source /tmp/img/meta.env

            docker load -i /tmp/img/image.tar
            docker rm -f "${CONTAINER_NAME}" || true

            docker run -d --name "${CONTAINER_NAME}" \
              -p "${HOST_PORT}:${CONTAINER_PORT}" \
              "${IMAGE}:${TAG}"

            docker ps | grep "${CONTAINER_NAME}"

      - run:
          name: In-container smoke test
          command: |
            set -e
            source /tmp/img/meta.env

            ATTEMPTS=5
            for i in $(seq 1 $ATTEMPTS); do
              echo "Smoke test attempt $i/$ATTEMPTS..."
              docker exec "${CONTAINER_NAME}" sh -c "apk add --no-cache curl >/dev/null 2>&1 || true"
              CODE=$(docker exec "${CONTAINER_NAME}" sh -c \
                "curl -s -o /dev/null -w '%{http_code}' -H 'Host: ${SITE_HOST}' http://127.0.0.1:80" || echo 000)
              if [ "$CODE" = "200" ]; then
                echo "Smoke test passed"
                break
              fi
              sleep 2
            done
            [ "$CODE" = "200" ] || { echo "Smoke test failed"; exit 1; }

      - run:
          name: Cleanup container
          when: always
          command: |
            source /tmp/img/meta.env
            docker rm -f "${CONTAINER_NAME}" || true

  push-image:
    executor: docker-exec
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: /tmp

      - run:
          name: Login to Docker Hub
          command: |
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - run:
          name: Push image (SHA tag)
          command: |
            set -e
            source /tmp/img/meta.env
            docker load -i /tmp/img/image.tar
            docker push "${IMAGE}:${TAG}"

workflows:
  build_test_push:
    when:
      equal: [ true, << pipeline.parameters.run_manual >> ]
    jobs:
      - build-image:
          filters:
            branches:
              only: main
      - smoke-test:
          requires: [build-image]
      - push-image:
          requires: [smoke-test]
