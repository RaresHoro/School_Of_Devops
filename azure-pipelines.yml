trigger: none


pool:
  vmImage: 'ubuntu-latest'

variables:

  IMAGE_NAME: 'school_of_devops-nginx'
  IMAGE_TAG: 'ado-$(Build.BuildId)'
  HOST_PORT: '8080'
  CONTAINER_PORT: '80'
  CONTAINER_NAME: 'schoolofdevops-ado-$(Build.BuildId)'
  SITE_HOST: 'www.schoolofdevops.ro'


  ACR_NAME: 'sampleReg12345'
  REGISTRY: '$(ACR_NAME).azurecr.io'
  REMOTE_IMAGE: '$(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)'

stages:
- stage: BuildTestPush
  displayName: 'Build, Smoke Test, Push'
  jobs:
  - job: docker_job
    displayName: 'Build, Test, Push to ACR'
    steps:
    - checkout: self


    - script: |
        set -e
        docker build \
          -t $(IMAGE_NAME):$(IMAGE_TAG) \
          -f Containers_SOD/nginx-alpine-site/Dockerfile \
          Containers_SOD/nginx-alpine-site
        docker images | grep $(IMAGE_NAME)
      displayName: 'Build Docker image'


    - script: |
        set -e
        docker rm -f $(CONTAINER_NAME) || true
        INUSE=$(docker ps -q --filter "publish=$(HOST_PORT)")
        [ -n "$INUSE" ] && docker rm -f $INUSE || true

        docker run -d --name $(CONTAINER_NAME) -p $(HOST_PORT):$(CONTAINER_PORT) \
          $(IMAGE_NAME):$(IMAGE_TAG)
        docker ps | grep $(CONTAINER_NAME)
      displayName: 'Run container locally'


    - script: |
        set -e
        ATTEMPTS=5
        for i in $(seq 1 $ATTEMPTS); do
          echo "Smoke test attempt $i/$ATTEMPTS..."
          docker exec $(CONTAINER_NAME) sh -c "apk add --no-cache curl >/dev/null 2>&1 || true"
          CODE=$(docker exec $(CONTAINER_NAME) sh -c \
            "curl -s -o /dev/null -w '%{http_code}' -H 'Host: $(SITE_HOST)' http://127.0.0.1:80" || echo 000)
          if [ "$CODE" = "200" ]; then
            echo "OK: HTTP 200"
            exit 0
          fi
          sleep 2
        done
        echo "Smoke test failed" && exit 1
      displayName: 'Smoke test (retry)'

    - task: AzureCLI@2
      displayName: 'Push image to ACR'
      inputs:
        azureSubscription: 'conn-horo'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          az acr login -n $(ACR_NAME)
          echo "Tagging & pushing $(IMAGE_NAME):$(IMAGE_TAG) -> $(REMOTE_IMAGE)"
          docker tag $(IMAGE_NAME):$(IMAGE_TAG) $(REMOTE_IMAGE)
          docker push $(REMOTE_IMAGE)
